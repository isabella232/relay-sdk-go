// Code generated by vfsgen; DO NOT EDIT.

package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/schemas": &vfsgen۰DirInfo{
			name:    "schemas",
			modTime: time.Time{},
		},
		"/schemas/v1": &vfsgen۰DirInfo{
			name:    "v1",
			modTime: time.Time{},
		},
		"/schemas/v1/Workflow.json": &vfsgen۰CompressedFileInfo{
			name:             "Workflow.json",
			modTime:          time.Time{},
			uncompressedSize: 6113,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x4b\x6f\xdb\x38\x10\xbe\xfb\x57\x0c\xd4\x1e\x93\x75\x7b\x5a\x20\xb7\xb4\xdd\x02\x05\x76\x37\x01\xd2\xdd\x1e\x16\x39\xd0\xd2\xc8\x62\x2d\x91\x2a\x49\x39\x09\x02\xff\xf7\x05\x1f\x92\x45\x8a\x72\x2c\xa9\x41\x0b\x14\xb1\x28\xce\x83\xdf\x7c\xf3\x10\x9f\x57\x00\xc9\x5b\x99\x16\x58\x91\xe4\x0a\x92\x42\xa9\xfa\x6a\xbd\xfe\x2e\x39\xbb\xb4\xab\xbf\x71\xb1\x5d\x67\x82\xe4\xea\xf2\xdd\xef\x6b\xbb\xf6\x26\xb9\xd0\x72\x8a\xaa\x12\xb5\xd4\x37\x2e\x76\x79\xc9\x1f\xec\x72\x86\x32\x15\xb4\x56\x94\x33\xfd\xf2\x1a\x6a\xc1\xbf\x63\xaa\x80\xe1\xa6\x29\x09\x3c\xb8\xdd\x90\x61\x4e\x19\x35\xfb\xac\xbe\xa7\xda\xa8\xe3\x1b\xbd\xdd\xae\xd5\x82\xd7\x28\x14\x45\x99\x5c\x81\xf6\x16\x20\x21\x35\xfd\x17\x85\xb4\xfa\xed\x5a\x4f\x5a\x2a\x41\xd9\xd6\x48\x9b\xf5\xc0\x9d\xbf\x03\x27\xec\x89\x60\xef\x14\x76\x62\xc8\x9a\x2a\xb9\x82\xff\xdc\x33\x40\xb2\x7f\x9f\xb8\x87\x7b\xf3\xf7\x60\xf7\x26\x3b\xca\xb2\xf9\x8e\x38\xfb\x46\xe8\x84\xf1\x0e\xe2\xa8\x0b\xbe\xea\xa9\x9e\x5c\x33\xe0\xe6\x81\x94\xd0\x48\x14\x97\xb5\xe0\x7b\x9a\x61\xd6\x0f\xd5\x51\xc2\xb3\x5c\x13\x41\x2a\x54\x28\x64\xcc\x70\x2f\x92\x36\x72\x59\x46\xad\xa1\xdb\x61\x5c\xcd\x8e\xb7\x02\x73\x2d\xf9\x66\x7d\x64\x87\x5c\xdf\xb6\x56\xda\xe3\x1f\x3c\x27\xa4\xc2\x3a\x6a\x9f\x08\x41\x9e\x46\xcf\xfd\x27\x95\x0a\x78\xde\xe3\x82\xd1\xd3\x6d\xaf\x28\xfb\xa2\xb0\xd2\x9a\xdf\x77\x8b\xd4\xad\xbc\xe8\xf3\x9d\xc2\x3a\xee\xae\x12\x74\xbb\x1d\x41\x6c\xa2\xc7\x9d\xaa\x98\xd3\xef\xa6\x3b\xfd\xd5\xea\x0b\xfc\x5e\x39\xdf\x13\x81\x3f\x1a\x2a\x30\xeb\xb8\xe9\xa0\x5f\x01\xdc\xbb\xdc\xef\x74\x1d\xf3\xf5\xce\x50\xfc\x33\xc5\x32\x9a\x27\x21\x49\x06\xf5\xa3\x5d\xe0\x42\x9f\x5d\x8b\x65\x40\x59\xce\x45\x45\x94\x97\xb3\x91\x62\xd1\xb7\x74\x5c\x19\xcf\x8d\xb8\x07\x7b\x52\x36\x68\x73\xb4\xdb\x77\x68\x31\xea\xcc\xf7\xd1\xb1\xfa\xfd\x2c\xfd\xe3\xb1\x16\x28\xc3\xba\x35\x4c\x46\xec\xf6\x01\x6a\xcb\x44\x61\x06\x9b\x27\x50\x05\xc2\x86\xa4\x3b\x64\x99\x9f\x84\xc7\xf4\x98\x03\x6f\x47\xa6\x2e\x97\xc3\xca\x7c\x12\xdc\x0c\x73\xd2\x94\x2a\xc4\x37\x30\xf3\xc9\xee\xea\xd9\x30\x98\xf6\xe0\xbc\x58\x8d\xc8\xce\x0d\xdb\x4d\x5b\xd3\xfa\xe7\x0a\xca\x98\x17\x48\x0f\x53\x93\xbe\x8b\xe0\xd4\xa9\x31\x09\x49\x46\xaa\x25\x34\xfd\x87\xd1\x1f\x0d\x06\xf6\x8d\xce\x11\x90\x6b\x64\x99\xbc\x19\x40\x1c\xa8\xbd\xb3\xc7\xd0\x9b\x91\xa5\xda\x69\xcf\x09\xce\xf0\x26\xf7\x7a\x95\xfe\xf7\xec\x3d\x0d\xcf\xe1\xbd\x3e\x5c\x9c\x27\xeb\xd7\xc6\xee\xf5\xb0\xb8\x9d\x65\xf5\x18\xf8\xe1\xd3\xfd\x99\x59\x1e\xc4\xae\xed\xcd\xdd\xde\x21\x38\xcf\x63\x95\xf7\x23\x67\x8a\x50\x86\xc2\x10\xaf\x8f\xc9\xa8\xc8\x75\xad\x1b\x35\x29\x9d\x44\x74\x32\xe8\xd4\xfe\x45\x1f\xa9\x57\x77\xc6\x58\x48\x2b\xb2\x5d\x42\xc3\x4f\x3c\xdd\xa1\x00\xa3\x06\x72\x2e\x2c\x0f\xf1\x11\xd3\x26\xc8\xbb\x1e\x19\x53\x5e\x55\xc4\x1b\xa3\xa6\x9a\xfd\x68\x35\x80\xe2\x40\xa5\x1c\xab\x2c\x44\x6c\x43\xaa\x9c\xa0\xd7\x98\x0d\x22\xb6\x4d\x85\x4c\x05\xa9\x10\x27\xe2\x09\x12\x1e\xa2\x3e\x52\x56\x37\xea\x33\x2d\x97\x04\xe1\x6b\x81\x20\xb0\x24\x8a\xee\x11\x6a\xa2\x0a\x8d\x0b\x61\x90\xd3\x12\xf5\xcf\x46\xda\xd8\xe8\x96\x62\xec\x81\x15\x8f\xa3\x66\x76\xcc\x87\xed\x4b\xcf\x80\x36\x6e\xb9\x80\x3f\x0f\xbc\x33\x73\xd4\x32\xfb\x74\x9a\x84\x65\x7f\xca\x48\x91\x72\x26\x35\x4c\xfa\x87\xd5\x76\x6a\x5a\x20\x65\x39\xb9\x36\xd8\x24\x1e\x49\x75\xaf\x1c\x2c\x3d\x02\x71\xca\x96\xcc\x3b\xed\x30\xb9\xa8\x8b\xba\x09\xf7\x57\x36\xd2\xd6\x85\xf1\x5e\x2a\x79\x23\xd2\x81\xc9\x93\x23\xf6\x9d\x15\x89\xaa\xdb\x50\x96\x69\x27\xa7\xe8\xfb\xe0\x64\xa2\x0a\x1f\x0a\x1c\xb4\xf9\xb8\xb6\xde\x8c\x3a\xaf\x07\x0e\x51\x89\x92\xd5\x47\xe1\xa7\x30\xc4\x9a\x8b\x12\x65\x42\x1f\xd6\x1f\x2b\x59\x53\xa2\xef\xe0\x59\xfd\xf8\xb6\x91\xc5\x0c\xb1\x6f\xb8\x29\x38\xdf\x85\x92\x51\xd8\xe2\xde\xcd\x81\x4f\x3a\x4d\xe7\xc0\x37\xab\x82\xb4\x06\x46\x32\xa6\x7d\xbb\xac\xc7\xe5\x9a\x89\xc8\xd2\x27\xd3\xf7\xd9\x9e\xef\x10\x54\x41\x65\x77\x2a\xf7\x2d\x65\xbe\x18\x4d\xb7\x4b\x05\x67\x20\x9f\x98\x22\x8f\xd3\x19\xee\xdd\xd2\xc0\xf0\x8c\x7e\xb0\x86\x7c\x98\x13\xa8\xba\x91\xc5\xab\x05\x49\x2b\x1f\x0f\x90\xb9\x13\x8c\x86\x27\xf0\x3a\xea\x79\xef\x56\xa9\xbd\xe4\xe2\x80\xfa\xbb\x3d\x45\xd0\x41\x68\x36\x15\x55\xfa\xdb\x16\xf7\xc8\x14\x64\x44\x11\x5f\xe3\x8b\xd7\x45\x70\xe2\xfa\xa5\x77\xe9\xb0\x68\x6a\x88\xc5\xbc\x22\xf1\x88\x47\x53\x79\x56\x71\xb3\x8a\x5e\x2d\xee\x4e\xff\x6b\xcf\x27\x53\x47\x85\x0f\x83\xc6\x77\x3e\x64\x2d\x54\xae\x79\x4e\xc2\x2a\x7a\x8b\xf9\x22\xe1\x97\xd0\x33\xd6\x67\xe7\xb0\xb3\xe7\xb9\xcf\xc8\x95\xfe\x7f\x58\xfd\x1f\x00\x00\xff\xff\xf2\x58\x43\x06\xe1\x17\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas"].(os.FileInfo),
	}
	fs["/schemas"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas/v1"].(os.FileInfo),
	}
	fs["/schemas/v1"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas/v1/Workflow.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
