// Code generated by vfsgen; DO NOT EDIT.

package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/schemas": &vfsgen۰DirInfo{
			name:    "schemas",
			modTime: time.Time{},
		},
		"/schemas/v1": &vfsgen۰DirInfo{
			name:    "v1",
			modTime: time.Time{},
		},
		"/schemas/v1/Workflow.json": &vfsgen۰CompressedFileInfo{
			name:             "Workflow.json",
			modTime:          time.Time{},
			uncompressedSize: 6074,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x4f\x6f\xdb\x36\x14\xbf\xfb\x53\x3c\xa8\x3d\x36\xf3\x7a\x1a\x90\x5b\xda\xae\x40\x81\x6d\x09\x90\x6e\x3d\x0c\x39\xd0\xd2\x93\xc5\x5a\x22\x55\x92\x72\x62\x04\xfe\xee\x03\x49\x49\x26\x29\xca\xb1\xa4\x06\x2b\x50\xc4\xa2\xf8\xfe\xf0\xf7\x7e\xef\x8f\xf8\xbc\x02\x48\xde\xca\xb4\xc0\x8a\x24\xd7\x90\x14\x4a\xd5\xd7\xeb\xf5\x77\xc9\xd9\x95\x5d\xfd\x85\x8b\xed\x3a\x13\x24\x57\x57\xbf\xfe\xb6\xb6\x6b\x6f\x92\x77\x5a\x4e\x51\x55\xa2\x96\xfa\xc6\xc5\x2e\x2f\xf9\xa3\x5d\xce\x50\xa6\x82\xd6\x8a\x72\xa6\x5f\xde\x40\x2d\xf8\x77\x4c\x15\x30\xdc\x34\x25\x81\xc7\x76\x37\x64\x98\x53\x46\xcd\x3e\xab\xef\x50\x1b\x75\x7c\xa3\xb7\xdb\xb5\x5a\xf0\x1a\x85\xa2\x28\x93\x6b\xd0\xde\x02\x24\xa4\xa6\xff\xa0\x90\x56\xbf\x5d\x73\xa4\xa5\x12\x94\x6d\x8d\xb4\x59\x0f\xdc\xf9\x2b\x70\xc2\x9e\x08\xf6\xad\xc2\x5e\x0c\x59\x53\x25\xd7\xf0\x6f\xfb\x0c\x90\xec\xdf\x27\xed\xc3\x83\xf9\x7b\xb4\x7b\x93\x1d\x65\xd9\x7c\x47\x5a\xfb\x46\xe8\x8c\xf1\x1e\xe2\xa8\x0b\xbe\xea\xa9\x9e\xdc\x30\xe0\xe6\x81\x94\xd0\x48\x14\x57\xb5\xe0\x7b\x9a\x61\xe6\x86\xea\x24\xe1\x59\xae\x89\x20\x15\x2a\x14\x32\x66\xd8\x89\xa4\x8d\x5c\x96\x51\x6b\xe8\x6e\x18\x57\xb3\xe3\xad\xc0\x5c\x4b\xbe\x59\x9f\xd8\x21\xd7\x77\x9d\x95\xee\xf8\x47\xcf\x09\xa9\xb0\x8e\xda\x27\x42\x90\xc3\xe8\xb9\xff\xa0\x52\x01\xcf\x1d\x2e\x18\x3d\xfd\xf6\x8a\xb2\x2f\x0a\x2b\xad\xf9\x7d\xbf\x48\xdb\x95\x17\x7d\xbe\x57\x58\xc7\xdd\x55\x82\x6e\xb7\x23\x88\x4d\xf4\xb8\x57\x35\xdd\xbf\xaf\x56\x34\x70\x71\xd5\xba\x99\x08\xfc\xd1\x50\x81\x59\x4f\xc3\x16\xe5\x15\xc0\x43\x9b\xe6\xbd\xae\x53\x6a\xde\x1b\x36\x7f\xa6\x58\x46\x53\x22\xe4\xc3\xa0\x54\x74\x0b\x5c\xe8\x63\x6a\xb1\x0c\x28\xcb\xb9\xa8\x88\xf2\xd2\x33\x52\x17\x5c\x4b\xa7\x95\xf1\x34\x88\x7b\xb0\x27\x65\x83\x36\x1d\xfb\x7d\xc7\x0e\xa3\xde\xbc\x8b\x8e\xd5\xef\x27\xe4\xef\x4f\xb5\x40\x19\x96\xa8\x61\xde\x61\xbf\x0f\x50\x5b\x26\x0a\x33\xd8\x1c\x40\x15\x08\x1b\x92\xee\x90\x65\x7e\xbe\x9d\x32\x61\x0e\xbc\x3d\x6f\xfa\xb4\x0d\x8b\xf0\x59\x70\x33\xcc\x49\x53\xaa\x10\xdf\xc0\xcc\x27\xbb\xcb\xb1\x61\x30\x75\xe0\x7c\xb7\x1a\x91\x9d\x1b\xb6\xdb\xae\x7c\xb9\xe7\x0a\x2a\x96\x17\x48\x0f\x53\x93\xa9\x8b\xe0\xd4\xa9\x31\x09\x49\x46\xaa\x25\x34\xfd\x9b\xd1\x1f\x0d\x06\xf6\x8d\xce\x11\x90\x6b\x64\x99\xbc\x1d\x40\x1c\xa8\xbd\xb7\xc7\xd0\x9b\x91\xa5\xda\x69\xcf\x09\xce\xf0\x36\xf7\xda\x92\xfe\xf7\xec\x3d\x0d\xcf\xe1\xbd\x3e\xbe\xbb\x4c\xd6\x2f\x83\xfd\xeb\x61\x71\xbb\xc8\xea\x29\xf0\xc3\xa7\x87\x0b\xb3\x3c\x88\x5d\xd7\x86\xfb\xbd\x43\x70\x9e\xc7\x2a\xef\x47\xce\x14\xa1\x0c\x85\x21\x9e\x8b\xc9\xa8\xc8\x4d\xad\x7b\x32\x29\x5b\x89\xe8\x10\xd0\xab\xfd\x93\x3e\x51\xaf\xee\x8c\xb1\x90\x56\x64\xbb\x84\x86\x9f\x78\xba\x43\x01\x46\x0d\xe4\x5c\x58\x1e\xe2\x13\xa6\x4d\x90\x77\x0e\x19\x53\x5e\x55\xc4\x9b\x98\xa6\x9a\xfd\x68\x35\x80\xe2\x40\xa5\x1c\xab\x2c\x44\x6c\x43\xaa\x9c\xa1\xd7\x98\x0d\x22\xb6\x4d\x85\x4c\x05\xa9\x10\x27\xe2\x19\x12\x1e\xa3\x3e\x52\x56\x37\xea\x33\x2d\x97\x04\xe1\x6b\x81\x20\xb0\x24\x8a\xee\x11\x6a\xa2\x0a\x8d\x0b\x61\x90\xd3\x12\xf5\xcf\x46\xda\xd8\xe8\x96\x62\xec\x81\x15\x8f\xa3\x66\x76\xcc\x87\xed\x8b\x63\x40\x1b\xb7\x5c\xc0\x9f\x07\xde\x85\x39\x6a\x99\x7d\x3e\x4d\xc2\xb2\x3f\x65\xa4\x48\x39\x93\x1a\x26\xfd\xc3\x6a\x3b\x37\x2d\x90\xb2\x9c\x5c\x1b\x6c\x12\x8f\xa4\xba\x57\x0e\x96\x1e\x81\xb4\xca\x96\xcc\x3b\xdd\x30\xb9\xa8\x8b\xb6\xc3\xec\xff\xd9\x48\x3b\x17\xc6\x7b\xa9\xe4\x8d\x48\x07\x26\xcf\x8e\xd8\xf7\x56\x24\xaa\x6e\x43\x59\xa6\x9d\x9c\xa2\xef\x43\x2b\x13\x55\xf8\x58\xe0\xa0\xcd\xc7\xb5\x39\x33\xea\xbc\x1e\x38\x44\x25\x4a\x56\x1f\x85\x9f\xc2\x10\x6b\x2e\x4a\x94\x09\x7d\x58\x7f\xac\x64\x4d\x89\xbe\x83\x17\xf5\xe3\xbb\x46\x16\x33\xc4\xbe\xe1\xa6\xe0\x7c\x17\x4a\x46\x61\x8b\x7b\x37\x07\x3e\xd9\x6a\xba\x04\xbe\x59\x15\xa4\x33\x30\x92\x31\xdd\xdb\x65\x3d\x2e\xd7\x4c\x44\x96\x1e\x4c\xdf\x67\x7b\xbe\x43\x50\x05\x95\xfd\xa9\xda\x6f\x29\xf3\xc5\x68\xba\x5d\x2a\x38\x03\x79\x60\x8a\x3c\x4d\x67\xb8\x77\x21\x03\xc3\x33\xfa\xc1\x1a\xf2\x61\x4e\xa0\xea\x46\x16\xaf\x16\x24\xad\x7c\x3c\x40\xe6\xfa\x2f\x1a\x9e\xc0\xeb\xa8\xe7\xce\x05\x52\x77\x9f\xc5\x01\xf5\x77\x7b\x8a\xa0\x83\xd0\x6c\x2a\xaa\xf4\xb7\x2d\xee\x91\x29\xc8\x88\x22\xbe\xc6\x17\x6f\x86\xe0\xcc\x4d\x8b\x73\xe9\xb0\x68\x6a\x70\xbf\xfa\xfd\xf8\x46\x13\x77\x56\x29\xb3\x8a\x5e\x2d\xca\xad\xfe\xd7\x9e\x46\xa6\x0e\x06\x1f\x06\x6d\xee\x72\xc8\x3a\xa8\xda\x56\x39\x09\xab\xe8\xf5\xe4\x8b\xf4\x5e\x42\xc6\x58\x57\x9d\xc3\x45\xc7\x73\x9f\x91\x2b\xfd\xff\xb8\xfa\x2f\x00\x00\xff\xff\x4e\xf5\x36\xae\xba\x17\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas"].(os.FileInfo),
	}
	fs["/schemas"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas/v1"].(os.FileInfo),
	}
	fs["/schemas/v1"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas/v1/Workflow.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
