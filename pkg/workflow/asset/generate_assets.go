// Code generated by vfsgen; DO NOT EDIT.

package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/schemas": &vfsgen۰DirInfo{
			name:    "schemas",
			modTime: time.Time{},
		},
		"/schemas/v1": &vfsgen۰DirInfo{
			name:    "v1",
			modTime: time.Time{},
		},
		"/schemas/v1/Workflow.json": &vfsgen۰CompressedFileInfo{
			name:             "Workflow.json",
			modTime:          time.Time{},
			uncompressedSize: 6113,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\xcd\x6e\xdb\x38\x10\xbe\xfb\x29\x06\x6a\x8f\xc9\xba\x3d\x2d\x90\x5b\xda\x6e\x81\x02\xbb\x9b\x00\xe9\x6e\x0f\x8b\x1c\x68\x71\x64\xb1\x96\x48\x95\xa4\x9c\x04\x81\xdf\x7d\x41\x52\x92\x45\x8a\x72\x2c\xa9\x41\x0b\x14\xb1\x28\xce\x37\xc3\x6f\x7e\xc5\xe7\x15\x40\xf2\x56\xa5\x39\x96\x24\xb9\x82\x24\xd7\xba\xba\x5a\xaf\xbf\x2b\xc1\x2f\xdd\xea\x6f\x42\x6e\xd7\x54\x92\x4c\x5f\xbe\xfb\x7d\xed\xd6\xde\x24\x17\x46\x4e\x33\x5d\xa0\x91\xfa\x26\xe4\x2e\x2b\xc4\x83\x5b\xa6\xa8\x52\xc9\x2a\xcd\x04\x37\x2f\xaf\xa1\x92\xe2\x3b\xa6\x1a\x38\x6e\xea\x82\xc0\x43\xb3\x1b\x28\x66\x8c\x33\xbb\xcf\xe1\x3d\x55\x16\x4e\x6c\xcc\x76\xb7\x56\x49\x51\xa1\xd4\x0c\x55\x72\x05\xc6\x5a\x80\x84\x54\xec\x5f\x94\xca\xe1\xbb\xb5\x9e\xb4\xd2\x92\xf1\xad\x95\xb6\xeb\x81\x39\x7f\x07\x46\xb8\x13\xc1\xbe\x01\xec\xc4\x90\xd7\x65\x72\x05\xff\x35\xcf\x00\xc9\xfe\x7d\xd2\x3c\xdc\xdb\xbf\x07\xb7\x37\xd9\x31\x4e\xe7\x1b\xd2\xe8\xb7\x42\x27\x94\x77\x14\x47\x4d\xf0\xa1\xa7\x5a\x72\xcd\x41\xd8\x07\x52\x40\xad\x50\x5e\x56\x52\xec\x19\x45\xda\x77\xd5\x51\xc2\xd3\x5c\x11\x49\x4a\xd4\x28\x55\x4c\x71\xcf\x93\xce\x73\x94\x32\xa7\xe8\x76\xe8\x57\xbb\xe3\xad\xc4\xcc\x48\xbe\x59\x1f\xa3\x43\xad\x6f\x5b\x2d\xed\xf1\x0f\x9e\x11\x4a\x63\x15\xd5\x4f\xa4\x24\x4f\xa3\xe7\xfe\x93\x29\x0d\x22\xeb\xc5\x82\xc5\xe9\xb6\x97\x8c\x7f\xd1\x58\x1a\xe4\xf7\xdd\x22\x6b\x56\x5e\xb4\xf9\x4e\x63\x15\x37\x57\x4b\xb6\xdd\x8e\x30\x36\xd1\xe2\x0e\x2a\x66\xf4\xbb\xe9\x46\x7f\x75\x78\x81\xdd\xab\xc6\xf6\x44\xe2\x8f\x9a\x49\xa4\x5d\x6c\x36\xd4\xaf\x00\xee\x9b\xdc\xef\xb0\x8e\xf9\x7a\x67\x43\xfc\x33\xc3\x22\x9a\x27\x61\x90\x0c\xea\x47\xbb\x20\xa4\x39\xbb\x11\xa3\xc0\x78\x26\x64\x49\xb4\x97\xb3\x91\x62\xd1\xd7\x74\x5c\x19\xcf\x8d\xb8\x05\x7b\x52\xd4\xe8\x72\xb4\xdb\x77\x68\x39\xea\xd4\xf7\xd9\x71\xf8\x7e\x96\xfe\xf1\x58\x49\x54\x61\xdd\x1a\x26\x23\x76\xfb\x00\x8d\x66\xa2\x91\xc2\xe6\x09\x74\x8e\xb0\x21\xe9\x0e\x39\xf5\x93\xf0\x98\x1e\x73\xe8\xed\x82\xa9\xcb\xe5\xb0\x32\x9f\x24\x97\x62\x46\xea\x42\x87\xfc\x06\x6a\x3e\xb9\x5d\x3d\x1d\x96\xd3\x1e\x9d\x17\xab\x11\xd9\xb9\x6e\xbb\x69\x6b\x5a\xff\x5c\x41\x19\xf3\x1c\xe9\x71\x6a\xd3\x77\x11\x9d\x26\x35\x26\x31\xc9\x49\xb9\x24\x4c\xff\xe1\xec\x47\x8d\x81\x7e\x8b\x39\x42\x72\x85\x9c\xaa\x9b\x01\xc5\x01\xec\x9d\x3b\x86\xd9\x8c\x3c\x35\x46\x7b\x46\x08\x8e\x37\x99\xd7\xab\xcc\xbf\x67\xef\x69\x78\x0e\xef\xf5\xe1\xe2\x3c\x59\xbf\x36\x76\xaf\x87\xc5\xed\x2c\xad\x47\xc7\x0f\x9f\xee\xcf\xcc\xf2\xc0\x77\x6d\x6f\xee\xf6\x0e\xc9\x79\x1e\xab\xbc\x1f\x05\xd7\x84\x71\x94\x36\xf0\xfa\x9c\x8c\x8a\x5c\x57\xa6\x51\x93\xa2\x91\x88\x4e\x06\x1d\xec\x5f\xec\x91\x79\x75\x67\x2c\x0a\x59\x49\xb6\x4b\xc2\xf0\x93\x48\x77\x28\xc1\xc2\x40\x26\xa4\x8b\x43\x7c\xc4\xb4\x0e\xf2\xae\x17\x8c\xa9\x28\x4b\xe2\x8d\x51\x53\xd5\x7e\x74\x08\xa0\x05\x30\xa5\xc6\x2a\x0b\x91\xdb\x30\x54\x4e\x84\xd7\x98\x0e\x22\xb7\x75\x89\x5c\x07\xa9\x10\x0f\xc4\x13\x41\x78\x88\xda\xc8\x78\x55\xeb\xcf\xac\x58\xe2\x84\xaf\x39\x82\xc4\x82\x68\xb6\x47\xa8\x88\xce\x0d\x2f\x84\x43\xc6\x0a\x34\x3f\x6b\xe5\x7c\x63\x5a\x8a\xd5\x07\x4e\x3c\xce\x9a\xdd\x31\x9f\xb6\x2f\x3d\x05\x46\xb9\x8b\x05\xfc\x79\xe4\x9d\x99\xa3\x2e\xb2\x4f\xa7\x49\x58\xf6\xa7\x8c\x14\xa9\xe0\xca\xd0\x64\x7e\x38\xb4\x53\xd3\x02\x29\x8a\xc9\xb5\xc1\x25\xf1\x48\xaa\x7b\xe5\x60\xe9\x11\x48\x03\xb6\x64\xde\x69\x87\xc9\x45\x5d\xb4\x99\x70\x7f\x65\x23\x6d\x4d\x18\xef\xa5\x4a\xd4\x32\x1d\xa8\x3c\x39\x62\xdf\x39\x91\x28\xdc\x86\x71\x6a\x8c\x9c\x82\xf7\xa1\x91\x89\x02\x3e\xe4\x38\x68\xf3\x71\xb4\xde\x8c\x3a\xaf\x07\x0e\x59\x89\x06\xab\xcf\xc2\x4f\x89\x10\xa7\x2e\x1a\x28\x13\xfa\xf0\x37\xdc\xe4\x42\xec\x7c\xfb\xce\x6a\xc7\xe6\x33\x87\xd6\x05\xce\x10\xbd\xad\x55\x1e\x8a\x45\x69\x8b\x5a\x37\x8b\x3d\x07\x74\x0e\x79\xb3\xea\x47\x83\xff\xda\x05\xf0\xec\x5a\x14\x77\xce\x1c\xe6\x54\x83\xf4\x6a\xd4\xb5\x0a\x46\x4a\x4d\xfb\x76\xd9\x70\x90\x19\xc2\x90\xa7\x4f\x76\x60\xe2\x7b\xb1\x43\xd0\x39\x53\xdd\xa9\x9a\x8f\x50\xfb\xa9\x6d\xc7\x84\x54\x0a\x0e\xea\x89\x6b\xf2\x38\xbd\x34\x78\xd7\x5b\x30\x3c\xa3\xef\xac\x61\x3a\xcc\x71\x54\x55\xab\xfc\xd5\x9c\x64\xc0\xc7\x1d\x64\x2f\x53\xa3\xee\x09\xac\x8e\x5a\xde\xbb\x8e\x6b\x6f\x07\x05\x20\xcf\x84\x39\x81\x71\x42\xbd\x29\x99\xd6\x48\x01\xf7\xc8\x35\x50\xa2\x89\x8f\xf8\xe2\x3d\x1b\x9c\xb8\xb7\xea\xdd\xd6\x2c\x1a\xb7\x62\x3e\x2f\xc9\xc9\x76\xf0\x61\xd0\xf8\xce\x77\x77\xeb\xe9\xa6\x79\x4e\x72\x75\xf4\x16\xf3\x45\xbf\x2d\x61\x39\xd6\x67\xe7\x90\xdc\xb3\xdc\x27\x76\x65\xfe\x1f\x56\xff\x07\x00\x00\xff\xff\x35\x84\x18\x17\xe1\x17\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas"].(os.FileInfo),
	}
	fs["/schemas"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas/v1"].(os.FileInfo),
	}
	fs["/schemas/v1"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas/v1/Workflow.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
