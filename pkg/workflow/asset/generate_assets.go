// Code generated by vfsgen; DO NOT EDIT.

package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/schemas": &vfsgen۰DirInfo{
			name:    "schemas",
			modTime: time.Time{},
		},
		"/schemas/v1": &vfsgen۰DirInfo{
			name:    "v1",
			modTime: time.Time{},
		},
		"/schemas/v1/Workflow.json": &vfsgen۰CompressedFileInfo{
			name:             "Workflow.json",
			modTime:          time.Time{},
			uncompressedSize: 3003,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4d\x4f\xe3\x3c\x10\xbe\xf7\x57\x8c\x02\x47\x78\xfb\x72\x5a\xa9\x37\x04\x5a\x09\x69\xb5\x20\xb1\x1f\x87\x55\x0f\x26\x99\xb4\x86\xc4\x36\x63\xa7\x2c\x42\xfd\xef\x2b\x7f\xd4\x89\xf3\xc1\xb6\x74\xb9\x10\x4f\x66\xe6\x99\x99\xe7\x19\xa7\x6f\x33\x80\xec\x54\xe7\x6b\xac\x59\xb6\x80\x6c\x6d\x8c\x5a\xcc\xe7\x8f\x5a\x8a\x73\x6f\xfd\x4f\xd2\x6a\x5e\x10\x2b\xcd\xf9\xff\x9f\xe6\xde\x76\x92\x9d\xd9\x38\xc3\x4d\x85\x36\xea\xa7\xa4\xa7\xb2\x92\x2f\xde\x5c\xa0\xce\x89\x2b\xc3\xa5\xb0\x2f\x2f\x41\x91\x7c\xc4\xdc\x80\xc0\x87\xa6\x62\xf0\x12\xbc\xa1\xc0\x92\x0b\xee\xfc\x7c\xbe\x57\xe5\xd2\xc9\x07\xeb\xee\x6d\x8a\xa4\x42\x32\x1c\x75\xb6\x00\x5b\x2d\x40\xc6\x14\xff\x81\xa4\x7d\x7e\x6f\xeb\x44\x6b\x43\x5c\xac\x5c\xb4\xb3\xf7\xca\xf9\xda\x2b\xc2\x77\x04\x9b\x90\x30\x86\xa1\x68\xea\x6c\x01\xbf\xc2\x19\x20\xdb\x5c\x64\xe1\xb0\x74\xff\xb7\xde\x37\x7b\xe2\xa2\xf8\x78\x21\x01\xdf\x05\xbd\x03\x1e\x47\x3c\x5a\x42\x9a\xfa\xd0\x4a\x2e\x05\x48\x77\x60\x15\x34\x1a\xe9\x5c\x91\xdc\xf0\x02\x8b\x2e\x55\x6d\x44\x82\xac\x18\xb1\x1a\x0d\x92\x1e\x03\xee\x30\xe9\x99\x2b\x0a\xee\x81\xee\x86\xbc\x3a\x8f\x53\xc2\xd2\x46\x9e\xcc\x5b\x75\xe8\xf9\xdd\x0e\x65\xd7\xfe\x36\x29\x42\x1b\x54\xa3\xf8\x8c\x88\xbd\x4e\xf6\xfd\x85\x6b\x03\xb2\xec\x68\xc1\xe5\x89\xee\x35\x17\x37\x06\x6b\x9b\xf9\x22\x1a\x79\xb0\xfc\xb5\xe6\x7b\x83\xaa\x57\xee\x2c\x94\x9c\x11\x3e\x37\x9c\xb0\x88\x1c\x87\x16\x66\x00\xcb\xb0\x43\x31\x51\xab\xfb\x76\x0a\x7b\x8c\x7a\xb0\x85\xb1\xcb\x48\x59\x7f\x01\x3d\xa1\x13\xc4\x14\x58\xb2\xa6\x32\x89\x71\x08\x73\xed\xbd\x3a\x18\x1b\x56\x35\x98\xc5\x90\xed\xd9\x6c\x22\x36\x49\x3b\xa1\xdc\x31\xc8\xdb\x9d\x74\xbb\x7d\xf5\xd4\xda\x72\xd0\x97\x8e\x63\xe9\xa8\x71\x5a\xe6\x0e\x9a\xa4\x60\x35\x1e\xd1\xef\x77\xc1\x9f\x1b\xec\xe1\xbb\x9c\x13\x43\x56\x28\x0a\x7d\x3b\x18\x71\x2f\xed\xbd\x6f\xc3\x3a\xa3\xc8\x6d\xd1\x49\x11\x52\xe0\x6d\x99\x5c\x49\xf6\xef\x2d\x39\x0d\xfb\x48\x5e\x6f\xcf\xf6\x8b\x4d\x97\x36\xbe\x1e\x2e\xde\x5e\xa8\x2d\xf1\xc3\xd3\x72\x28\x8e\xc8\xde\x60\x45\x21\x72\xb7\xbb\x82\xa3\xef\x70\x38\x6f\x53\xb7\xc2\x95\x14\x86\x71\x81\xe4\x84\xd7\x9d\xc9\x64\xc8\xa5\xb2\xf7\x31\xab\x42\xc4\xe8\x07\x20\x4d\xdb\xd1\xf3\x94\x08\xc3\xc8\x12\x45\xe4\x52\x68\xbb\xe0\xf6\xc1\x67\x1b\x97\x14\xaf\xd9\xea\x18\x05\x5f\xcb\xfc\x09\x09\x5c\x1a\x28\x25\x79\x09\xe3\x6f\xcc\x9b\xde\xca\x76\x40\x73\x59\xd7\x2c\xf9\xd0\x1e\x0a\x7b\xe5\x33\x80\x91\xc0\xb5\x9e\xba\x94\x18\xad\xfa\x2a\x7b\x47\x99\x53\x18\x8c\x56\x4d\x8d\xc2\xf4\xb6\x68\x5c\xc3\xef\xe8\x77\x3b\x4e\x80\x50\x8d\xf9\xcc\xab\x63\x48\xf8\xb6\x46\x20\xac\x98\xe1\x1b\x04\xc5\xcc\xda\xce\x85\x09\x28\x79\x85\xf6\xb1\xd1\x9e\x1b\xb3\x46\x70\x78\xe0\xc3\x27\x24\x61\x3d\x3e\x3e\xb6\x9b\x0e\x80\x05\xf7\x5a\xc0\x7f\x37\xbc\x3d\xd7\xdb\x2b\x7b\x74\xc3\x92\x2d\x3c\x76\xc1\x58\x48\x36\xf2\x75\x1a\xad\xd0\x67\x5b\xb6\xbf\x22\x66\xdb\xd9\x9f\x00\x00\x00\xff\xff\x6f\xf5\xc5\x4e\xbb\x0b\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas"].(os.FileInfo),
	}
	fs["/schemas"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas/v1"].(os.FileInfo),
	}
	fs["/schemas/v1"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas/v1/Workflow.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
