// Code generated by vfsgen; DO NOT EDIT.

package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/schemas": &vfsgen۰DirInfo{
			name:    "schemas",
			modTime: time.Time{},
		},
		"/schemas/v1": &vfsgen۰DirInfo{
			name:    "v1",
			modTime: time.Time{},
		},
		"/schemas/v1/Workflow.json": &vfsgen۰CompressedFileInfo{
			name:             "Workflow.json",
			modTime:          time.Time{},
			uncompressedSize: 2231,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4d\x6f\xdb\x30\x0c\xbd\xe7\x57\x10\xee\x0e\xdb\xd0\xd6\xdb\x69\x40\x2e\x43\xb0\x5e\x06\x0c\x6b\x81\x7d\x1d\x86\x1c\x54\x9b\x4e\xd4\xda\x92\x4a\x49\xe9\x8a\x21\xff\x7d\x90\xe4\x2f\x29\xf6\xd0\x20\xdb\x25\x89\x28\x92\x8f\x7c\x7c\x54\x7e\x2f\x00\xb2\x17\xba\xd8\x62\xc3\xb2\x25\x64\x5b\x63\xd4\x32\xcf\xef\xb4\x14\x17\xc1\x7a\x29\x69\x93\x97\xc4\x2a\x73\xf1\xe6\x5d\x1e\x6c\x67\xd9\xb9\x8b\x33\xdc\xd4\xe8\xa2\x7e\x48\xba\xaf\x6a\xf9\x18\xcc\x25\xea\x82\xb8\x32\x5c\x0a\x77\xb9\x02\x45\xf2\x0e\x0b\x03\x02\x6f\x6d\xcd\xe0\xb1\xf5\x86\x12\x2b\x2e\xb8\xf7\x0b\xf9\x9e\x94\x4f\x27\x6f\x9d\x7b\xb0\x29\x92\x0a\xc9\x70\xd4\xd9\x12\x5c\xb5\x00\x19\x53\xfc\x3b\x92\x0e\xf9\x83\x6d\x14\xad\x0d\x71\xb1\xf1\xd1\xde\x9e\x94\xf3\x39\x29\x22\x74\x04\xbb\x36\x61\x1f\x86\xc2\x36\xd9\x12\x7e\xb6\x67\x80\x6c\xf7\x36\x6b\x0f\x6b\xff\xbd\x0f\xbe\x09\xc0\xb1\xf5\xac\x04\x48\x7f\x60\x35\x58\x8d\x74\xa1\x48\xee\x78\x89\xe5\x98\xa7\x21\x22\x42\x56\x8c\x58\x83\x06\x49\x4f\x01\x8f\x68\x6c\xbd\x8d\x41\x12\x37\x87\x8c\xfa\xeb\x97\x97\xaf\xdf\xbf\x8a\x4c\x4e\x1a\x84\x95\xcb\x75\x96\x0f\xc3\xd2\xf9\x4d\x87\x9b\xf5\xbe\xfb\xf6\xd7\xbe\x87\x63\x65\xc9\x43\x5f\x11\x62\xc5\x6a\x8d\x51\x17\xda\xa0\x9a\x6c\x80\x11\xb1\xa7\x59\xe2\x3e\x71\x6d\x40\x56\xa3\x49\xfa\x3c\xbd\x3b\x37\xd8\x24\x2d\x4e\x77\xf3\xc5\xa0\xea\x1a\x09\x6d\xb8\x4f\x5f\x5d\x46\xf8\x60\x39\x61\xd9\x2b\x61\x2c\xbe\xa8\xfe\x05\xc0\xba\x95\x7f\x9f\x7a\x90\xec\xc0\xd8\x33\x06\x95\x34\xfa\x75\x8b\x30\x4c\x1a\xba\x92\xc0\x48\x20\x2b\xc0\x6c\xb9\xee\x49\x18\x4d\x7b\x66\xcc\x25\x56\xcc\xd6\x26\x1d\x74\x82\x79\x15\xbc\x06\x5c\xd8\xb1\xda\xe2\x68\xde\xe7\x8b\x99\xd8\x28\xed\xcc\x12\x4c\x41\x5e\x77\x5b\x30\x60\x1e\x08\x3f\x52\x5a\x24\x22\x3f\xc4\xe3\xb9\x5d\xc5\xf2\x49\x9f\xa4\xbf\x32\x29\x58\x83\x27\xf4\xfb\x4d\xf0\x07\x8b\x09\xbe\xcf\x39\x49\x32\x6f\xd8\xe6\x14\xb8\x2b\x59\xdc\x23\x81\x4f\x03\x95\xa4\x80\x87\xbf\xb0\xb0\x09\xbf\xd1\x64\x15\x8a\x52\x5f\xcf\xce\x35\x5e\xd1\x69\x86\xeb\x76\x51\x5b\x82\x5d\x46\x14\x85\xa3\x33\x8a\x3b\xdc\xd7\xa9\x16\x47\x97\xfb\xc9\x92\x0b\xd9\x34\x4c\x94\x27\x30\xf5\x21\x64\x70\xfb\xc5\xb5\x9e\x13\x3d\xa3\x4d\x5a\xed\x11\xac\x74\x18\x8c\x36\xb6\x41\x61\xfe\x0f\x17\x5c\x28\x7b\xb0\xe9\xcf\x2f\xf2\xa3\x0b\x87\x60\x72\x6c\x04\xb1\xe0\xbf\x2b\xf5\xe0\x3f\x63\xfc\xdc\x86\xfd\x3a\xef\x94\xbf\x1e\x5e\xe6\xc5\xfe\x4f\x00\x00\x00\xff\xff\xac\x80\x73\x71\xb7\x08\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas"].(os.FileInfo),
	}
	fs["/schemas"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas/v1"].(os.FileInfo),
	}
	fs["/schemas/v1"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas/v1/Workflow.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
