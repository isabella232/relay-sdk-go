// Code generated by vfsgen; DO NOT EDIT.

package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/schemas": &vfsgen۰DirInfo{
			name:    "schemas",
			modTime: time.Time{},
		},
		"/schemas/v1": &vfsgen۰DirInfo{
			name:    "v1",
			modTime: time.Time{},
		},
		"/schemas/v1/Workflow.json": &vfsgen۰CompressedFileInfo{
			name:             "Workflow.json",
			modTime:          time.Time{},
			uncompressedSize: 6092,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x5b\x6f\xdb\x36\x14\x7e\xf7\xaf\x38\x50\xfb\xd8\xcc\xeb\xd3\x80\xbc\xa5\xed\x0a\x14\xd8\x96\x00\xe9\xd6\x87\x21\x0f\xb4\x74\x64\xb1\x96\x48\x95\xa4\x9c\x18\x81\xff\xfb\xc0\x8b\x64\x91\xa2\x1c\x4b\x6a\xb0\x02\x45\x2c\x8a\xe7\xc2\xef\x7c\xe7\x22\x3e\xaf\x00\x92\xb7\x32\x2d\xb0\x22\xc9\x35\x24\x85\x52\xf5\xf5\x7a\xfd\x5d\x72\x76\x65\x57\x7f\xe1\x62\xbb\xce\x04\xc9\xd5\xd5\xaf\xbf\xad\xed\xda\x9b\xe4\x9d\x96\x53\x54\x95\xa8\xa5\xbe\x71\xb1\xcb\x4b\xfe\x68\x97\x33\x94\xa9\xa0\xb5\xa2\x9c\xe9\x97\x37\x50\x0b\xfe\x1d\x53\x05\x0c\x37\x4d\x49\xe0\xd1\xed\x86\x0c\x73\xca\xa8\xd9\x67\xf5\x1d\x6a\xa3\x8e\x6f\xf4\x76\xbb\x56\x0b\x5e\xa3\x50\x14\x65\x72\x0d\xda\x5b\x80\x84\xd4\xf4\x1f\x14\xd2\xea\xb7\x6b\x3d\x69\xa9\x04\x65\x5b\x23\x6d\xd6\x03\x77\xfe\x0a\x9c\xb0\x27\x82\xbd\x53\xd8\x89\x21\x6b\xaa\xe4\x1a\xfe\x75\xcf\x00\xc9\xfe\x7d\xe2\x1e\x1e\xcc\xdf\xa3\xdd\x9b\xec\x28\xcb\xe6\x3b\xe2\xec\x1b\xa1\x33\xc6\x3b\x88\xa3\x2e\xf8\xaa\xa7\x7a\x72\xc3\x80\x9b\x07\x52\x42\x23\x51\x5c\xd5\x82\xef\x69\x86\x59\x3f\x54\x27\x09\xcf\x72\x4d\x04\xa9\x50\xa1\x90\x31\xc3\xbd\x48\xda\xc8\x65\x19\xb5\x86\xee\x86\x71\x35\x3b\xde\x0a\xcc\xb5\xe4\x9b\xf5\x89\x1d\x72\x7d\xd7\x5a\x69\x8f\x7f\xf4\x9c\x90\x0a\xeb\xa8\x7d\x22\x04\x39\x8c\x9e\xfb\x0f\x2a\x15\xf0\xbc\xc7\x05\xa3\xa7\xdb\x5e\x51\xf6\x45\x61\xa5\x35\xbf\xef\x16\xa9\x5b\x79\xd1\xe7\x7b\x85\x75\xdc\x5d\x25\xe8\x76\x3b\x82\xd8\x44\x8f\x3b\x55\xd3\xfd\xfb\x6a\x45\x03\x17\x57\xce\xcd\x44\xe0\x8f\x86\x0a\xcc\x3a\x1a\x3a\x94\x57\x00\x0f\x2e\xcd\x3b\x5d\xa7\xd4\xbc\x37\x6c\xfe\x4c\xb1\x8c\xa6\x44\xc8\x87\x41\xa9\x68\x17\xb8\xd0\xc7\xd4\x62\x19\x50\x96\x73\x51\x11\xe5\xa5\x67\xa4\x2e\xf4\x2d\x9d\x56\xc6\xd3\x20\xee\xc1\x9e\x94\x0d\xda\x74\xec\xf6\x1d\x5b\x8c\x3a\xf3\x7d\x74\xac\x7e\x3f\x21\x7f\x7f\xaa\x05\xca\xb0\x44\x0d\xf3\x0e\xbb\x7d\x80\xda\x32\x51\x98\xc1\xe6\x00\xaa\x40\xd8\x90\x74\x87\x2c\xf3\xf3\xed\x94\x09\x73\xe0\xed\x78\xd3\xa5\x6d\x58\x84\xcf\x82\x9b\x61\x4e\x9a\x52\x85\xf8\x06\x66\x3e\xd9\x5d\x3d\x1b\x06\xd3\x1e\x9c\xef\x56\x23\xb2\x73\xc3\x76\xdb\x96\xaf\xfe\xb9\x82\x8a\xe5\x05\xd2\xc3\xd4\x64\xea\x22\x38\x75\x6a\x4c\x42\x92\x91\x6a\x09\x4d\xff\x66\xf4\x47\x83\x81\x7d\xa3\x73\x04\xe4\x1a\x59\x26\x6f\x07\x10\x07\x6a\xef\xed\x31\xf4\x66\x64\xa9\x76\xda\x73\x82\x33\xbc\xcd\xbd\xb6\xa4\xff\x3d\x7b\x4f\xc3\x73\x78\xaf\x8f\xef\x2e\x93\xf5\xcb\x60\xf7\x7a\x58\xdc\x2e\xb2\x7a\x0a\xfc\xf0\xe9\xe1\xc2\x2c\x0f\x62\xd7\xb6\xe1\x6e\xef\x10\x9c\xe7\xb1\xca\xfb\x91\x33\x45\x28\x43\x61\x88\xd7\xc7\x64\x54\xe4\xa6\xd6\x3d\x99\x94\x4e\x22\x3a\x04\x74\x6a\xff\xa4\x4f\xd4\xab\x3b\x63\x2c\xa4\x15\xd9\x2e\xa1\xe1\x27\x9e\xee\x50\x80\x51\x03\x39\x17\x96\x87\xf8\x84\x69\x13\xe4\x5d\x8f\x8c\x29\xaf\x2a\xe2\x4d\x4c\x53\xcd\x7e\xb4\x1a\x40\x71\xa0\x52\x8e\x55\x16\x22\xb6\x21\x55\xce\xd0\x6b\xcc\x06\x11\xdb\xa6\x42\xa6\x82\x54\x88\x13\xf1\x0c\x09\x8f\x51\x1f\x29\xab\x1b\xf5\x99\x96\x4b\x82\xf0\xb5\x40\x10\x58\x12\x45\xf7\x08\x35\x51\x85\xc6\x85\x30\xc8\x69\x89\xfa\x67\x23\x6d\x6c\x74\x4b\x31\xf6\xc0\x8a\xc7\x51\x33\x3b\xe6\xc3\xf6\xa5\x67\x40\x1b\xb7\x5c\xc0\x9f\x07\xde\x85\x39\x6a\x99\x7d\x3e\x4d\xc2\xb2\x3f\x65\xa4\x48\x39\x93\x1a\x26\xfd\xc3\x6a\x3b\x37\x2d\x90\xb2\x9c\x5c\x1b\x6c\x12\x8f\xa4\xba\x57\x0e\x96\x1e\x81\x38\x65\x4b\xe6\x9d\x76\x98\x5c\xd4\x45\xdd\x30\xfb\x7f\x36\xd2\xd6\x85\xf1\x5e\x2a\x79\x23\xd2\x81\xc9\xb3\x23\xf6\xbd\x15\x89\xaa\xdb\x50\x96\x69\x27\xa7\xe8\xfb\xe0\x64\xa2\x0a\x1f\x0b\x1c\xb4\xf9\xb8\xb6\xde\x8c\x3a\xaf\x07\x0e\x51\x89\x92\xd5\x47\xe1\xa7\x30\xc4\x9a\x8b\x12\x65\x42\x1f\xd6\x1f\x2b\x59\x53\xa2\xef\xe0\x45\xfd\xf8\xae\x91\xc5\x0c\xb1\x6f\xb8\x29\x38\xdf\x85\x92\x51\xd8\xe2\xde\xcd\x81\x4f\x3a\x4d\x97\xc0\x37\xab\x82\xb4\x06\x46\x32\xa6\x7d\xbb\xac\xc7\xe5\x9a\x89\xc8\xd2\x83\xe9\xfb\x6c\xcf\x77\x08\xaa\xa0\xb2\x3b\x95\xfb\x96\x32\x5f\x8c\xa6\xdb\xa5\x82\x33\x90\x07\xa6\xc8\xd3\x74\x86\x7b\x17\x32\x30\x3c\xa3\x1f\xac\x21\x1f\xe6\x04\xaa\x6e\x64\xf1\x6a\x41\xd2\xca\xc7\x03\x64\xae\xff\xa2\xe1\x09\xbc\x8e\x7a\xde\xbb\x40\x6a\xef\xb3\x38\xa0\xfe\x6e\x4f\x11\x74\x10\x9a\x4d\x45\x95\xfe\xb6\xc5\x3d\x32\x05\x19\x51\xc4\xd7\xf8\xe2\xcd\x10\x9c\xb9\x69\xe9\x5d\x3a\x2c\x9a\x1a\x62\x31\xaf\x48\x3c\xe2\xd1\x54\x9e\x55\xdc\xac\xa2\x57\x8b\xbb\xd3\xff\xda\xf3\xc9\xd4\x51\xe1\xc3\xa0\xf1\x5d\x0e\x59\x0b\x95\x6b\x9e\x93\xb0\x8a\x5e\x58\xbe\x48\xf8\x25\xf4\x8c\xf5\xd9\x39\xec\xec\x79\xee\x33\x72\xa5\xff\x1f\x57\xff\x05\x00\x00\xff\xff\x92\x29\x02\x23\xcc\x17\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas"].(os.FileInfo),
	}
	fs["/schemas"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas/v1"].(os.FileInfo),
	}
	fs["/schemas/v1"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas/v1/Workflow.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
