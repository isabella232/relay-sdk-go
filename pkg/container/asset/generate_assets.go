// Code generated by vfsgen; DO NOT EDIT.

package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/schemas": &vfsgen۰DirInfo{
			name:    "schemas",
			modTime: time.Time{},
		},
		"/schemas/v1": &vfsgen۰DirInfo{
			name:    "v1",
			modTime: time.Time{},
		},
		"/schemas/v1/StepContainer-common.json": &vfsgen۰CompressedFileInfo{
			name:             "StepContainer-common.json",
			modTime:          time.Time{},
			uncompressedSize: 1718,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x54\x4f\x8f\xda\x3e\x10\xbd\xf3\x29\x2c\x2f\xa7\x9f\x08\x81\xd3\x4f\x70\xab\xba\xaa\xb4\xa7\xad\x8a\xd4\x43\xa3\x6c\xe5\x8d\x27\xe0\x6d\xfc\xa7\xf6\x80\x44\x57\xf9\xee\x95\xed\x24\x24\x40\x28\xea\xa5\x27\xd0\x78\xe6\xbd\x37\x33\x6f\xf2\x3e\x21\x84\x4e\x5d\xb1\x03\xc9\xe8\x9a\xd0\x1d\xa2\x59\xa7\xe9\x9b\xd3\x2a\x89\xd1\xb9\xb6\xdb\x94\x5b\x56\x62\xb2\xf8\x3f\x8d\xb1\x07\x3a\x0b\x75\x82\xf7\x6a\x14\xbc\xee\x2b\x36\x37\x7b\x63\x00\xe7\x85\x96\x4d\xb2\x4b\x0b\xad\x90\x09\x05\x36\x3d\x2c\xd3\x0d\x82\xf9\xd8\x06\x92\x42\x4b\xa9\xd5\xdc\xf3\x45\x4c\x0e\xae\xb0\xc2\xa0\xd0\xca\x63\x6f\x76\xcc\x02\x27\xc6\x6a\x03\x16\x05\x38\xa2\x4b\xc2\x88\x43\x30\xa4\x83\x25\x4c\xf1\xf3\x10\x82\x34\x15\x43\x88\xa8\x78\x34\xe0\xe1\xf4\xeb\x1b\x14\x18\x63\x27\x4c\xba\x26\x7e\x0e\x84\x50\xa1\x76\x60\x05\xfa\x00\x9d\x5a\x28\x7d\xcd\x43\xca\xa1\x14\x4a\x78\x49\x2e\xfd\x24\x2a\xf8\x02\x25\xad\x67\xb1\xc2\xf1\x1f\x5f\xc1\xba\x28\x37\xa2\xf4\xf8\x1c\x5a\xa1\xb6\x74\xd6\xc6\x0d\x43\x04\x1b\x3a\x7b\x39\x64\xcb\x64\x95\x67\x8b\x64\x95\xff\x37\xa5\x21\xa3\x05\x15\x92\x6d\x7b\xb2\xae\x37\xd0\x07\xfc\x7c\xd9\x4b\x78\x7e\xc9\x3e\x24\xdf\x58\xf2\x2b\x6f\x7e\x17\xc9\xea\x7b\xe2\xe9\xc6\x1b\x7c\xf2\xdc\xb4\x6e\x30\xea\x8e\x89\x71\x1e\x32\x58\x35\x20\x2b\x59\xe5\x60\x20\xde\x01\xa2\x50\xdb\x7f\x24\x7f\x13\xd9\xff\xaa\x81\x49\x93\x4e\x7b\x80\x27\x6f\xb4\x9b\xef\xb5\xc5\xd4\xf1\xd9\x07\xb2\x4e\xf2\xfb\xf9\xea\x3b\x7e\xd2\x6b\x6c\x7c\x22\xe1\xcd\xc2\xcf\xbd\xb0\xe0\x8f\x2b\xa3\xa5\xd5\x92\xce\x08\x55\x4c\x02\xcd\x07\x79\x57\x1c\xdc\xbd\x85\xb2\xf5\x4d\x3d\x21\x2f\xc0\x5e\xcb\xeb\xa5\x9d\xfe\xb7\xff\xf2\xc1\xc6\xa3\x65\xee\x58\xf7\xa0\xb1\xee\x42\xf3\x93\x1d\x46\x7c\xd0\xa5\xde\x7d\x97\xa1\x8c\x83\x01\xc5\xdd\xb3\x3a\x1b\x4f\xa7\x8f\x59\xcb\x8e\xc3\xd9\x4b\xa1\x9e\x10\xa4\x17\xb0\x1c\x3c\x88\x26\x7a\xf3\x6e\x1e\x3b\xc6\xcb\x99\xd5\x97\x33\x7b\xbc\x22\xf0\xae\x6f\xc7\xd8\x5d\x0c\x28\xda\x53\xb8\x6d\xd8\x7b\x4d\x79\xcb\x6c\xc3\x8f\xf6\x1f\x3d\x77\x60\xd5\x3e\xec\x72\xc4\x64\xbd\x93\x39\x33\x9c\xbf\xd0\x49\x3d\xf9\x1d\x00\x00\xff\xff\x64\xec\x3c\x37\xb6\x06\x00\x00"),
		},
		"/schemas/v1/StepContainer.json": &vfsgen۰CompressedFileInfo{
			name:             "StepContainer.json",
			modTime:          time.Time{},
			uncompressedSize: 717,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\xcf\x4e\xc3\x30\x0c\xc6\xef\x7d\x0a\xcb\xdb\xb1\x6d\xe0\x84\xd4\x1b\xe2\x01\x38\x70\x44\x3d\x74\xa9\xbb\x65\xb4\x49\x70\xdc\x49\x68\xea\xbb\xa3\xfe\x59\x95\x21\x10\x88\x5d\x1c\xe5\x93\xbf\x9f\x3f\x27\xe7\x04\x00\xb7\x41\x1f\xa8\xab\xb0\x00\x3c\x88\xf8\x42\xa9\x63\x70\x36\x9b\xd5\xdc\xf1\x5e\xd5\x5c\x35\x92\xdd\x3d\xa8\x59\xdb\x60\x3a\xf9\x4c\x1d\x79\x2c\xed\xfa\xb6\xca\x7d\xef\x3d\x49\xae\x5d\xb7\x34\x07\xa5\x9d\x95\xca\x58\x62\x75\xba\x57\x2f\x42\xfe\xe9\x22\xe4\xe3\xa0\x19\x56\x53\xd0\x6c\xbc\x18\x67\x47\xe8\x23\x04\x21\x0f\xab\x75\x6e\xaa\xda\xf6\xb9\xc1\x02\x5e\x13\x00\x80\x33\x6e\x99\x9a\x1b\x23\x64\xda\x75\x9d\xb3\x53\x92\x0d\x0e\xe9\x4c\x9e\x2a\x00\xca\x87\xa7\x71\x80\xdb\x1d\x49\x0b\xa6\x17\x9d\xe9\xbd\x37\x4c\xf5\x9a\x65\x52\x4f\xc4\xc1\x2c\x0b\x2d\xd2\x9b\xb1\x35\x2e\xd7\x72\xb5\x7b\x76\x9e\x58\x0c\x05\x2c\xd6\x61\x11\x20\x16\xa3\x14\x41\xd8\xd8\x7d\x84\x07\x40\xb2\x7d\x37\xa6\xc0\x78\x45\x2c\xd7\x96\xe1\x6b\x98\xff\xb0\xaf\x5e\xec\x07\xb8\x18\x69\xe9\x17\xfa\xb7\xc6\xeb\x9f\xff\x9b\x3d\x89\xcf\xb1\x96\xc9\x90\x7c\x06\x00\x00\xff\xff\xb7\xc8\x2f\x40\xcd\x02\x00\x00"),
		},
		"/schemas/v1/StepContainerTemplate.json": &vfsgen۰CompressedFileInfo{
			name:             "StepContainerTemplate.json",
			modTime:          time.Time{},
			uncompressedSize: 622,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\xbb\x6a\xf3\x40\x10\x85\x7b\x3d\xc5\x30\x76\x69\x69\xff\xbf\x0a\xa8\x0b\x79\x80\x14\x49\x17\x54\xac\x57\x23\x7b\x1d\xed\x25\xb3\x23\x43\x30\x7a\xf7\xa0\x8b\xc5\x12\x52\x25\xcd\x08\x1d\xe6\x7c\xe7\x0c\x7b\x2b\x00\x70\x9f\xcc\x99\x9c\xc6\x1a\xf0\x2c\x12\x6b\xa5\x2e\x29\xf8\x72\x51\xab\xc0\x27\xd5\xb2\xee\xa4\xfc\xf7\xa0\x16\x6d\x87\x87\xd9\x67\xdb\xcc\xe3\xe9\x38\xf4\xba\x8a\x43\x8c\x24\x95\x09\x6e\x5d\x4e\xca\x04\x2f\xda\x7a\x62\x75\xfd\xaf\x5e\x84\xe2\xd3\x5d\x78\x25\x17\x7b\x2d\x54\x4d\x81\x0b\xb4\xa5\x64\xd8\x46\xb1\xc1\x4f\xf0\x47\x48\x42\x11\x36\x04\xc8\x6a\x59\xb6\x75\xdf\x3f\x77\x58\xc3\x5b\x01\x00\x70\xc3\x3d\x53\xf7\xc7\x4e\xa5\x09\xce\x05\x3f\x57\xda\xe1\x78\x58\xc8\xf3\x04\x40\xf9\x8c\x34\x05\x84\xe3\x85\x8c\xe0\xe1\xae\x33\x7d\x0c\x96\xa9\xdd\xba\xcc\xea\x95\x38\xd9\xf5\xb2\x55\x7a\xb7\xbe\xc5\xf5\xb7\xd9\xec\x91\x43\x24\x16\x4b\x09\xeb\x2d\x2c\x03\xe4\x62\xd6\x22\x09\x5b\x7f\xca\xf0\x00\x48\x7e\x70\x53\x0b\xcc\x4f\xc4\x66\x5b\x19\xbf\x97\xf9\x0d\xfb\xc7\x57\xcc\x43\x8a\xfc\x3b\xcd\xa6\x18\x8b\xaf\x00\x00\x00\xff\xff\xbd\x98\xe6\x9a\x6e\x02\x00\x00"),
		},
		"/scripts": &vfsgen۰DirInfo{
			name:    "scripts",
			modTime: time.Time{},
		},
		"/scripts/build.tpl": &vfsgen۰CompressedFileInfo{
			name:             "build.tpl",
			modTime:          time.Time{},
			uncompressedSize: 243,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xcb\x41\x6a\xc3\x30\x14\x04\xd0\xfd\x3f\xc5\x34\xce\xd6\xca\xbe\xd0\x55\x9c\x42\x08\xc4\x90\xfa\x02\x5f\xd1\xb7\x2d\x2a\xc9\xc1\x92\x0a\x41\xe8\xee\xc5\xc9\x6e\x66\x78\xd3\x7c\x1c\x72\x5c\x0f\xda\x86\x83\x84\x3f\x68\x8e\x33\x51\x83\x61\xb6\x11\xa3\x75\x02\x1b\xc1\x39\x2d\x9e\x93\xbd\xb3\x73\x4f\x4c\x12\x64\xe5\x24\x06\xfa\x89\x34\x0b\xae\xa2\xb3\x63\xfc\x74\x17\x85\xae\xc7\xb5\x1f\x70\xea\xce\x83\x22\x8a\x92\xd0\x4a\x5e\xf0\xb0\x0f\x19\xd9\x3a\xa2\x86\x1a\x1c\x17\xef\x39\x98\x48\x0d\x51\xd7\x1f\x2f\xa7\xdb\xd7\x6e\x5f\xde\xe9\xb3\x35\xcb\xfd\x57\xd6\xba\x7b\xd9\x8d\x94\x82\x95\xc3\x24\x50\x67\xcf\x93\x44\xd4\x4a\xfb\xb7\x86\xce\xd6\x19\xb4\x09\xa5\x40\xdd\x64\x44\xad\x68\xc7\x57\xfb\xb6\x4e\x02\x7b\xd9\x26\x45\xa5\xb4\x90\x60\xb6\xef\x7f\x00\x00\x00\xff\xff\x51\xef\x93\xa0\xf3\x00\x00\x00"),
		},
		"/templates": &vfsgen۰DirInfo{
			name:    "templates",
			modTime: time.Time{},
		},
		"/templates/bash.v1": &vfsgen۰DirInfo{
			name:    "bash.v1",
			modTime: time.Time{},
		},
		"/templates/bash.v1/Dockerfile.standalone.tpl": &vfsgen۰CompressedFileInfo{
			name:             "Dockerfile.standalone.tpl",
			modTime:          time.Time{},
			uncompressedSize: 663,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\xcf\x6b\xc2\x30\x14\xc7\xef\xfd\x2b\x1e\x32\x3d\x0c\x92\x80\x4c\x0f\x8e\x1d\x06\x43\xf6\xd3\x8d\x8a\x3b\xed\x12\xeb\xab\x06\x9b\x18\xf2\x52\x57\x56\xf2\xbf\x8f\xea\x86\xa1\xf5\x30\x76\x6c\xf3\x7d\x9f\xbc\xef\x87\xd4\x35\x83\x8b\x37\x99\x6d\xe5\x1a\xa7\xaa\xc0\x99\xd4\x08\x93\x1b\xb0\x4e\x19\x9f\x43\xcf\x28\xd6\x27\x56\x28\x53\x56\x4c\xea\xd5\xf8\x8a\x7b\xe9\x78\xf5\xd5\x03\x3e\xbf\x7b\x7a\x47\x47\x6a\x67\x80\x85\x90\xc4\xa4\xf9\xfd\xed\x70\x34\x3e\xc7\xeb\x13\xa7\x8d\x1c\x8e\xc6\x5c\x52\xd6\xeb\x5e\xdd\x26\xa5\x68\x77\x8b\xf4\x39\x46\x6c\xbc\xb7\x34\x11\xc2\x1e\x13\xc4\x0d\x2e\xcb\x42\x72\x5b\x5a\x8b\x9e\x1b\xf4\xc2\x28\xd1\xa7\xee\x8a\xd3\xf4\xf5\x05\xea\x1a\xf8\x83\x3e\x0c\x2e\x25\x21\x4f\x31\x87\x10\x92\x74\x31\x03\x42\x0f\x0c\xcb\x0a\xae\xe1\x23\x01\x00\xd0\xdb\x95\x72\xc0\x2c\x08\xaf\xad\x30\x0a\x06\x83\x9f\x93\x6c\xd5\xfd\xf7\xb9\x46\xdf\xe0\x4f\x5d\x0f\x5b\xb4\xab\x74\x3a\x87\xf0\x6f\x46\x4b\x74\x4c\x3a\x6a\xa6\x52\x03\xcb\x1a\xe2\x1f\x46\xbc\x74\xc0\xaa\xfd\x63\x1e\xe7\xcf\x26\xf5\x1e\x8c\x62\x8d\xca\x48\x71\x08\x97\xf1\x4b\x69\xdc\x88\x92\x9c\x28\x76\x99\x2c\xc4\x52\x99\xb6\x41\x76\xfa\x72\x1a\x58\xee\x7e\x9d\x26\xdf\x01\x00\x00\xff\xff\x2b\x84\x5b\xb7\x97\x02\x00\x00"),
		},
		"/templates/bash.v1/Dockerfile.tpl": &vfsgen۰CompressedFileInfo{
			name:             "Dockerfile.tpl",
			modTime:          time.Time{},
			uncompressedSize: 493,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x3f\x4f\xc3\x30\x10\xc5\xf7\x7c\x8a\x27\x0b\x3a\xd5\xc9\x8e\xc4\x80\x8a\x2a\x81\xd4\x3f\x2a\x30\x20\xd4\xe1\x6a\x5f\x13\xd3\xc4\x0e\xb1\x33\x19\x7f\x77\x94\x82\x50\x88\x54\xb1\x79\x38\xff\x7e\xef\xee\xc5\x28\x71\xb5\x34\x35\x6f\x29\x54\xb8\xb9\x45\xdb\x19\x1b\x8e\x10\x85\xe5\x43\x5f\x53\xe1\x03\xb7\xf2\xda\xe7\xbe\x12\xc8\xd7\xd4\x30\x64\x4a\xd9\x72\xb7\x59\x21\x46\xe4\x4f\x1c\x82\xb1\xa5\xcf\x1f\x1a\x2a\x19\x29\x65\xbb\x97\x35\xa8\x3d\x41\x4a\xeb\xa4\x22\x55\x31\x48\x6b\x1c\xc8\x57\x50\x24\x15\x77\xc1\x1c\x8d\xa2\xc0\x1e\xaa\xef\x6a\x94\x26\xe0\xfd\x03\xae\x65\xeb\x7d\x85\xd9\x0c\x7d\xab\x29\xb0\x9c\x4c\x67\x43\x56\x73\x1c\x39\xef\xb4\x36\xc1\x38\x4b\xf5\x96\xd4\x89\x4a\xf6\x97\x03\xc4\x88\x8e\x6c\xc9\xff\x7d\x3f\x6f\x85\x94\x62\x04\x5b\x3d\xf0\x06\xed\xe8\x79\x99\xb2\x70\x4d\x43\x56\xff\x86\x78\x13\xc5\xc1\xd8\x62\xd8\x5c\xcc\x21\xa4\x12\xf3\x6f\xfa\x27\x9a\xde\x87\x67\xf7\xe8\x9d\x45\x4a\xfb\xb1\x62\xb1\xd9\xbe\x42\xe4\xc5\x9f\xe3\xfe\x90\xcf\x1d\xa5\x24\x20\x62\x1c\xb5\x96\x92\xc8\x16\xab\xfb\xa9\x6f\x3a\xb3\xcf\xbe\x02\x00\x00\xff\xff\x4c\xa5\xd6\xf8\xed\x01\x00\x00"),
		},
		"/templates/bash.v1/container.yaml": &vfsgen۰CompressedFileInfo{
			name:             "container.yaml",
			modTime:          time.Time{},
			uncompressedSize: 550,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xb1\x6a\xf3\x40\x10\x84\xfb\x7b\x8a\x01\xd7\xf6\x8f\xf9\x3b\x75\x8e\xd3\x84\x04\x62\x88\x49\x63\x5c\x6c\x74\x1b\xeb\xd0\x69\x75\x68\x57\x22\x8f\x1f\x74\x96\x62\x27\xc4\xa4\x12\x2c\xdf\x7c\x9a\x9b\x81\x3b\x0d\xad\x14\x28\x5b\x31\x0a\xc2\xdd\xbf\x61\xed\xea\x20\xbe\xc0\x8b\x71\xda\xce\xe7\x3d\x37\x29\x92\xb1\x53\x5f\xbf\xce\xa1\x61\xed\x42\x43\x27\xd6\xc2\x01\x6f\xa4\x3c\x7e\x01\x9b\xd8\x02\xf7\x6d\x59\x73\xf7\x1e\x22\xaf\x2c\x45\x07\x2c\xa0\x46\xe2\x29\xb6\x92\xe1\xc5\x2d\xfc\x82\x7d\x25\x01\xcf\x89\xc5\xeb\xb3\xcc\xd1\x65\xfe\xab\x53\x36\x0b\x72\xca\x35\xb6\x6d\xd3\x90\xf8\x1d\x59\x75\x6e\xe3\x59\xcb\x2e\x24\xcb\x8d\xf7\x15\x23\x91\x55\xb0\x16\x56\x31\xb4\xe2\x18\x71\x06\xc6\x5b\xd7\x4b\x0e\x0d\x14\x7b\x2e\xa0\xc6\x69\xa5\x95\x03\x1e\xc6\x77\xde\x10\x6e\x62\x0a\xc2\x78\x0a\xd2\x7f\x2c\xc7\x42\x1e\x79\x96\x51\xd8\x2b\x5f\x0b\x29\xa3\xc5\x7f\x07\x6c\xbc\x0f\xa3\x83\xe2\x8e\xca\x7a\x5e\xf1\x87\xfe\x02\x61\xb3\x7b\x44\x9a\xc8\xd1\x1c\x44\x8d\x62\xbc\xb6\x1f\x8e\xdf\xbc\xd3\x14\x7f\x78\xef\x48\x2b\x94\x13\xfa\xcb\x06\x87\xa3\xfb\x0c\x00\x00\xff\xff\x39\xc0\x15\xe3\x26\x02\x00\x00"),
		},
		"/templates/go.v1": &vfsgen۰DirInfo{
			name:    "go.v1",
			modTime: time.Time{},
		},
		"/templates/go.v1/Dockerfile.tpl": &vfsgen۰CompressedFileInfo{
			name:             "Dockerfile.tpl",
			modTime:          time.Time{},
			uncompressedSize: 618,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x5f\x6b\xdb\x30\x14\xc5\xdf\xf5\x29\x0e\x62\xeb\x53\x65\xef\xb9\xd0\x87\x34\xc9\x4a\xb7\x35\x0e\xee\xd6\x31\x4a\x19\x37\x92\xec\x88\xda\x92\x91\xe4\x87\xa1\xe9\xbb\x0f\x3b\xa5\x24\x1d\xa5\x6f\xd2\xfd\x73\xce\xe1\xfe\x52\x12\xf8\x70\x65\x2c\xf9\x3f\xb8\xb8\xc4\xe0\x8d\x8d\x0d\x78\x39\x06\x5f\x76\x4e\x52\x57\xee\x8c\x2d\xad\xde\x8d\x1d\x89\x8f\x81\xa3\xd8\x50\xaf\x21\x72\x66\x9f\xeb\xea\x16\xad\xeb\xc8\xb6\x17\x29\xa1\xb8\xd3\x31\x1a\xdb\x86\xe2\xda\xdd\x6b\x1f\x8c\xb3\xc8\x59\x50\x37\x18\xab\xb1\xb8\xc3\x6e\x34\x9d\xd2\x9e\xad\x37\xf7\x58\x5e\x57\xbf\xd7\x9b\xc5\xd5\xb7\xf5\x0a\x9f\xd8\xcf\xaa\xfe\xba\xba\xa9\x51\xce\x23\x6c\x59\x6d\x7f\xa1\x40\xc1\xea\x1f\x1b\xb4\xee\xb0\x08\x41\x10\x0e\x3c\xa5\x97\xbc\x39\x73\xf0\xa2\x3c\xf1\x5e\xba\xbe\x27\xab\xb6\x14\xf7\x53\x9f\x1d\x52\x9e\x8c\xdc\xf4\xd4\x6a\xe4\x3c\xcb\xd3\xf0\x04\x21\xac\x13\x92\xe4\x5e\x83\x94\x82\x24\x21\xb5\x8f\xa6\x31\x92\xa2\x0e\x38\x3b\xc3\x38\x28\x8a\x5a\xbc\xea\xb0\xe9\x78\xa6\x39\x92\x5e\x28\x65\xa2\x71\x96\xba\x2d\xc9\x27\x6a\x75\x78\xdb\x27\x25\x78\xb2\xad\x7e\x6f\x7d\x0e\x8f\x9c\x53\x82\xb6\x6a\xd2\x9b\x6c\x8f\x9e\x6f\xab\x3c\x1f\xe3\x25\xc4\x03\x9f\x69\x86\x3d\x3f\x07\x17\x92\x9f\x1f\xb4\xff\xa2\x1f\x43\xfc\xee\xbe\x84\x19\xd9\xe3\xb1\xc1\xcc\x42\x88\xc6\xbb\xfe\xf2\x19\xe0\xff\x0c\x4e\xff\x6c\x79\xbb\xc2\xc3\xab\xe2\x23\xfb\x17\x00\x00\xff\xff\x95\xc6\x1f\x70\x6a\x02\x00\x00"),
		},
		"/templates/go.v1/container.yaml": &vfsgen۰CompressedFileInfo{
			name:             "container.yaml",
			modTime:          time.Time{},
			uncompressedSize: 590,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x41\x6b\xe3\x30\x10\x85\xef\xfa\x15\x43\xce\x9b\x04\x93\x9b\x6f\xd9\x2c\x84\x65\xf7\x10\x68\xe8\xa5\x14\x32\xb6\x26\xf6\x60\x59\x12\xd2\xd8\x6d\xfe\x7d\x91\x62\x93\x34\xb4\xf4\x64\xb0\xde\xfb\xde\xcc\x9b\x91\x42\x64\x67\x4b\xa8\x9d\x15\x64\x4b\x61\x3d\x16\xaa\x63\xab\x4b\x78\x12\xf2\xbb\xf9\xf7\x91\x7a\x6f\x50\x48\x45\xdd\x3d\xcf\xa6\xb1\x50\xdc\x63\x43\xb1\x54\x00\x15\x46\x4a\x5f\x00\x99\xb4\x25\xfc\x71\x75\x47\xe1\xcc\x86\x56\xe2\x8d\x8a\x24\xc2\xb6\xc9\xf2\x9d\xeb\x7b\xb4\xfa\x80\xd2\x5e\x5d\x9a\x62\x1d\xd8\x4b\x26\x1f\x5b\x02\x8f\xd2\x82\x38\x90\x96\xa0\xbe\xaa\xa1\x62\x8b\xe1\xf2\x0b\x0c\x77\x04\xa7\xba\xd7\xeb\xfe\xb2\x9c\x1e\x4f\x0a\x60\xef\xe6\xe1\xbe\x66\x4e\xfb\x82\x3b\x67\xec\xde\x81\x41\xdb\x0c\xd8\x50\x4a\xaa\x06\x36\x1a\xde\x58\xda\xec\x1e\xd1\x0c\x54\xc2\xa2\x58\x15\x9b\x85\x02\xf8\x9b\x76\xfd\x06\xbc\x35\x9e\x2d\xc1\x7f\xb6\xc3\xfb\x32\x55\xa1\x21\x57\x93\xb0\x43\x24\x38\xbb\x00\x9a\xa3\x04\xae\x86\xd4\x41\x8e\x8f\x42\xfe\xd6\xfc\x7d\x26\x66\x5c\xb9\x51\x00\x5b\xad\x39\xe5\xa0\x39\x60\xdd\xcd\x6d\x3f\x8c\x70\x13\xc1\xf6\xf0\x0f\xfc\xa4\x4c\xe9\x6c\xa3\xa0\x31\xf7\xf4\x97\xd7\x4f\xdc\xe9\x14\x3f\x70\x7f\x63\x6c\xe7\x3b\x64\x70\x18\xec\x03\xf4\x23\x00\x00\xff\xff\x61\xfa\xc0\x81\x4e\x02\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas"].(os.FileInfo),
		fs["/scripts"].(os.FileInfo),
		fs["/templates"].(os.FileInfo),
	}
	fs["/schemas"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas/v1"].(os.FileInfo),
	}
	fs["/schemas/v1"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas/v1/StepContainer-common.json"].(os.FileInfo),
		fs["/schemas/v1/StepContainer.json"].(os.FileInfo),
		fs["/schemas/v1/StepContainerTemplate.json"].(os.FileInfo),
	}
	fs["/scripts"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/scripts/build.tpl"].(os.FileInfo),
	}
	fs["/templates"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/templates/bash.v1"].(os.FileInfo),
		fs["/templates/go.v1"].(os.FileInfo),
	}
	fs["/templates/bash.v1"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/templates/bash.v1/Dockerfile.standalone.tpl"].(os.FileInfo),
		fs["/templates/bash.v1/Dockerfile.tpl"].(os.FileInfo),
		fs["/templates/bash.v1/container.yaml"].(os.FileInfo),
	}
	fs["/templates/go.v1"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/templates/go.v1/Dockerfile.tpl"].(os.FileInfo),
		fs["/templates/go.v1/container.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
