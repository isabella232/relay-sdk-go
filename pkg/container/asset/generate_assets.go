// Code generated by vfsgen; DO NOT EDIT.

package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/schemas": &vfsgen۰DirInfo{
			name:    "schemas",
			modTime: time.Time{},
		},
		"/schemas/v1": &vfsgen۰DirInfo{
			name:    "v1",
			modTime: time.Time{},
		},
		"/schemas/v1/StepContainer.json": &vfsgen۰FileInfo{
			name:    "StepContainer.json",
			modTime: time.Time{},
			content: []byte(""),
		},
		"/schemas/v1/StepContainerTemplate.json": &vfsgen۰CompressedFileInfo{
			name:             "StepContainerTemplate.json",
			modTime:          time.Time{},
			uncompressedSize: 1753,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x54\xb1\x6e\xdb\x30\x10\xdd\xfd\x15\x04\xe3\xa9\x88\x2c\x67\x2a\xec\x2d\x28\xd0\x35\x45\x53\x74\xa8\xa0\x14\x8c\x78\xb2\x99\x48\x14\x4b\x9e\x0c\xa4\x81\xfe\xbd\x20\x29\xd1\x94\x62\xb9\x6e\x97\x4c\x36\x8e\xef\xde\xf1\x3d\xbe\xd3\xeb\x82\x10\xba\x34\xc5\x1e\x6a\x46\xb7\x84\xee\x11\xd5\x36\x4d\x9f\x4c\x23\x13\x5f\x5d\x35\x7a\x97\x72\xcd\x4a\x4c\xd6\x1f\x53\x5f\xbb\xa2\xd7\xae\x4f\xf0\xa8\x47\xc2\x63\x5b\xb1\x95\x6a\x95\x02\x5c\x15\x4d\xdd\x83\x4d\x5a\x34\x12\x99\x90\xa0\xd3\xc3\x4d\x7a\x8f\xa0\x3e\x0d\x85\x6f\x50\xab\x8a\x21\xac\xec\x40\x4f\xca\xc1\x14\x5a\x28\x14\x8d\xb4\xe4\xb7\xc4\x20\x28\x12\x28\x08\xf6\x2d\x1e\x8d\x2f\x0a\x2c\xac\x79\x7c\x82\x02\x7d\x4d\xe9\x46\x81\x46\x01\x86\x6e\x89\x15\x48\x08\x3d\x80\x36\x9e\xd1\x17\xa2\x56\x83\x5a\xc8\x9d\x6b\x75\x75\x90\x6d\x4d\xb7\x24\xa3\xf1\xb5\x69\xee\x8e\x3b\x8f\xa2\xcf\x42\xf2\x7f\xe2\x3a\xa9\x7a\x42\x2a\xe4\x1e\xb4\x40\xcb\x4b\x97\x1a\x4a\x4b\x78\x95\x72\x28\x85\x14\xd6\x0e\x93\x7e\x16\x15\x7c\x85\x92\x0e\x1d\x86\x3f\x7f\xbf\x5c\x98\x62\x88\xa0\x9d\xab\x0f\x87\xec\x26\xd9\xe4\xd9\x3a\xd9\xe4\x1f\x96\x74\x74\x8d\x20\xdb\x9c\x22\x8d\x8c\x8e\x49\xbf\xbc\xf5\xdc\x1d\x3f\x64\xb7\xc9\x0f\x96\xfc\xce\xfb\xdf\x75\xb2\xf9\x99\xd8\x91\xf3\x22\x83\x4d\xb4\xeb\x79\xba\x30\x8d\x71\xee\x50\xac\x1a\x0d\x2c\x59\x65\x60\x24\xc2\x00\xa2\x90\xbb\x77\x92\x70\xef\xa7\xff\x97\x80\x45\x0f\x3f\x0b\xed\x37\x25\x4c\x3c\x06\x7d\x88\x48\xa4\x9b\xc9\x97\x3b\x5b\xc8\x82\xa6\xd7\x69\x46\xc2\x05\x49\xa4\x7c\xde\x32\x77\xa6\xe1\x57\x2b\x34\x70\x97\xef\x52\x37\x35\xbd\x26\x54\xb2\x1a\x68\x3e\xc2\x9d\x58\xc7\x70\xe6\xda\xb6\x67\xef\xe3\x70\x8e\xf6\x14\x2e\x82\x1d\xff\x0f\xff\xc6\xeb\x75\xcc\xd5\x05\x99\x18\x89\x0b\x9f\x9c\xfc\x98\x99\x99\xb0\x04\xe8\xc5\x4b\xec\xda\x38\x28\x90\xdc\xdc\xc9\x89\x45\x73\xbb\x4c\xa6\xfb\x3c\x97\xd1\x37\x9e\x74\x23\x4f\x86\xa0\x9e\x4f\xcb\xa5\x89\x38\xf7\xd2\xe3\xcf\xfa\x5f\x1f\xfc\xc0\xaa\xd6\x99\x38\xf3\xc2\x51\x5e\x27\xaf\x6d\xf7\x67\xd1\x2d\xfe\x04\x00\x00\xff\xff\x17\x28\xdb\xbc\xd9\x06\x00\x00"),
		},
		"/templates": &vfsgen۰DirInfo{
			name:    "templates",
			modTime: time.Time{},
		},
		"/templates/bash.v1": &vfsgen۰DirInfo{
			name:    "bash.v1",
			modTime: time.Time{},
		},
		"/templates/bash.v1/Dockerfile.standalone.tpl": &vfsgen۰CompressedFileInfo{
			name:             "Dockerfile.standalone.tpl",
			modTime:          time.Time{},
			uncompressedSize: 654,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\xcb\x6e\xea\x30\x10\x86\xf7\x79\x8a\x11\x3a\xb0\x38\x92\x6d\x09\x15\x16\x54\x5d\xf4\x22\x54\xf5\x42\xab\x20\xba\xea\xc6\x84\x09\x58\xc4\x8e\xe5\x71\x68\xd4\xc8\xef\x5e\xa5\xb4\x10\x92\x76\xd3\x65\x32\xbf\xbe\x99\xff\x93\xab\x8a\xc1\xbf\x67\x99\x6c\xe5\x1a\xa7\x2a\xc3\x99\xd4\x08\x93\x0b\xb0\x4e\x19\x9f\x42\xcf\x28\xd6\x27\x96\x29\x53\x94\x4c\xea\xd5\xf8\x8c\x7b\xe9\x78\xf9\xde\x03\x3e\xbf\xb9\x7f\x41\x47\x2a\x37\xc0\x42\x88\x9a\xa4\xf9\xed\xe5\x70\x34\xfe\x89\xd7\x27\x4e\x1b\x39\x1c\x8d\xb9\xa4\xa4\xd7\x5d\xdd\x26\xc5\x68\xf3\x45\xfc\xd0\x44\x6c\xbc\xb7\x34\x11\xc2\xee\x13\xc4\x0d\x2e\x8b\x4c\x72\x5b\x58\x8b\x9e\x1b\xf4\xc2\x28\xd1\xa7\xd3\x13\x43\x88\xa6\xf1\xd3\x23\x54\x15\xf0\xeb\xdc\x78\xa9\x0c\x3a\xe2\x57\x92\x90\xc7\x98\xd6\xf3\x78\x31\x03\x42\x0f\x0c\x8b\x12\xce\xe1\x35\x02\x00\xd0\xdb\x95\x72\xc0\x2c\x08\xaf\xad\x30\x0a\x06\x83\xaf\x49\xb2\xea\xfe\x7b\x5b\xa3\xaf\x57\x1c\xeb\x7e\x1e\xd2\x6e\xd3\xa9\x1d\xc2\x9f\x19\x2d\xd7\x4d\xd2\xde\x34\x15\x1a\x58\xf2\x5b\xfe\x10\xf6\xd2\x01\x2b\x77\x77\x69\xf7\xba\x43\x46\xef\xc0\x28\x56\x2b\x3c\x31\xfb\xbf\xf9\x40\x6a\x1f\xa2\x20\x27\xb2\x3c\x91\x99\x58\x2a\xd3\xb6\xc6\x8e\x5f\x4e\x03\x4b\xdd\xb7\xc7\xe8\x23\x00\x00\xff\xff\xec\x80\xac\xb2\x8e\x02\x00\x00"),
		},
		"/templates/bash.v1/Dockerfile.tpl": &vfsgen۰CompressedFileInfo{
			name:             "Dockerfile.tpl",
			modTime:          time.Time{},
			uncompressedSize: 491,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x3f\x4f\xc3\x30\x10\xc5\xf7\x7c\x8a\x27\x0b\x3a\xd5\xc9\x8e\xc4\x80\x5a\x55\x62\xe8\x1f\x15\x31\x20\xd4\xe1\x6a\x5f\x13\xb7\x89\x1d\x6c\x77\x32\xfe\xee\x28\xa5\x42\xa1\x12\x62\xf3\x70\xfe\xfd\xde\xdd\x4b\x49\xe2\x6e\x61\x5a\xde\x50\x6c\xf0\xf0\x88\xde\x1b\x1b\x0f\x10\x95\xe5\xfd\xb9\xa5\x2a\x44\xee\xe5\x7d\x28\x43\x23\x50\xae\xa8\x63\xc8\x9c\x8b\xc5\x76\xbd\x44\x4a\x28\x5f\x38\x46\x63\xeb\x50\x3e\x77\x54\x33\x72\x2e\xb6\xaf\x2b\x50\x7f\x82\x94\xd6\x49\x45\xaa\x61\x90\xd6\xd8\x53\x68\xa0\x48\x2a\xf6\xd1\x1c\x8c\xa2\xc8\x01\xea\xec\x5b\xd4\x26\xe2\xf8\x01\xd7\xb3\x0d\xa1\xc1\x64\x82\x73\xaf\x29\xb2\xbc\x99\x2e\x86\xac\xe6\x30\x72\x3e\x69\x6d\xa2\x71\x96\xda\x0d\xa9\x13\xd5\x1c\xfe\x0e\x90\x12\x3c\xd9\x9a\xff\xfb\x7e\xd9\x0a\x39\xa7\x04\xb6\x7a\xe0\x0d\xda\xd1\xf3\x4a\x99\x73\x50\xde\xf4\xd1\xf9\x11\x67\xe6\xba\x8e\xac\xfe\x89\xf1\x2e\xaa\xbd\xb1\xd5\xb0\xbb\x98\x42\x48\x25\xa6\xdf\xfc\x4f\x44\x77\x0c\xce\x22\xe7\xdd\x58\x30\x5b\x6f\xde\x20\xca\xea\xd7\x69\xaf\xd4\x4b\x43\x39\x0b\x88\x94\x46\x9d\xe5\x2c\x8a\xd9\x72\x7e\xeb\xba\x9d\xd9\x15\x5f\x01\x00\x00\xff\xff\x67\xf1\xf0\x12\xeb\x01\x00\x00"),
		},
		"/templates/bash.v1/container.yaml": &vfsgen۰CompressedFileInfo{
			name:             "container.yaml",
			modTime:          time.Time{},
			uncompressedSize: 546,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x41\x6a\xf3\x30\x10\x46\xf7\x3a\xc5\x77\x81\xe4\x27\xfc\x3b\xef\xd2\x74\x53\x5a\x68\xa0\xa1\x9b\x90\xc5\xd4\x9a\x46\xc2\xf2\x58\x78\xc6\xa6\xc7\x2f\x72\x9c\x26\x85\xb4\x5d\x09\xc4\x7b\x6f\x86\x19\xb9\xd7\xd8\x49\x85\xba\x13\xa3\x28\xdc\xff\x1b\x57\xae\x89\xe2\x2b\xbc\x18\xe7\xcd\xf9\x7b\xc7\x6d\x4e\x64\xec\xd4\x37\xaf\x67\x69\x5c\xb9\x2f\x4f\x2b\x07\xbc\x91\x72\x79\x01\x9b\xf9\x0a\xf7\x5d\xdd\x70\xff\x1e\x13\x2f\x2d\x27\x07\xa8\x91\x78\x4a\x9d\xfc\x86\x5e\xa0\xd9\x02\x3c\x67\x16\xaf\xcf\x72\xd2\x16\xd3\x34\xa7\x6c\x16\xe5\x38\x8d\xdf\x74\x6d\x4b\xe2\xb7\x64\xa1\x9a\x15\xad\xfb\x98\x6d\xda\x76\x17\x18\x99\x2c\xc0\x3a\x58\x60\x68\xe0\x94\x70\x02\xca\x5f\x3f\xc8\x24\x8d\x94\x06\xae\xa0\xc6\x79\xa9\xc1\x01\x0f\x2d\x1d\xf9\x87\xe0\x3a\xe5\x28\x8c\xa7\x28\xc3\xc7\xa2\x2c\xe4\x11\x0b\x5e\x82\x83\xf2\x75\x90\x26\xb4\xfa\xef\x80\xb5\xf7\xb1\x34\x28\x6d\xa9\x6e\xe8\xc8\x7a\x23\x7f\x81\xb0\xde\x3e\x22\xcf\x64\x29\x47\x51\xa3\x94\xae\xeb\xfb\xc3\xb7\xee\x7c\x8a\x3f\xba\x77\xa4\x01\xf5\x8c\xde\xb8\xc1\xfe\xe0\x3e\x03\x00\x00\xff\xff\x35\x4d\x6d\x69\x22\x02\x00\x00"),
		},
		"/templates/go.v1": &vfsgen۰DirInfo{
			name:    "go.v1",
			modTime: time.Time{},
		},
		"/templates/go.v1/Dockerfile.tpl": &vfsgen۰CompressedFileInfo{
			name:             "Dockerfile.tpl",
			modTime:          time.Time{},
			uncompressedSize: 391,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x41\x6b\xf2\x40\x10\x86\xef\xfb\x2b\x5e\xc2\xf7\x79\x9b\xa4\x67\xc1\x83\x46\x2b\xd2\x9a\x48\xa4\x96\x52\x4a\x19\x93\x35\x2e\x4d\x76\xc3\x66\x73\x28\xcb\xfe\xf7\x52\x2d\x85\xd8\xe3\xcc\xfb\xcc\xcc\x33\xde\x13\xfe\x2d\x94\x66\xfb\x89\xe9\x0c\x9d\x55\xda\x9d\x10\x25\x43\x6f\x93\xc6\x94\xdc\x24\x47\xa5\x13\x2d\x8f\x43\xc3\xf4\xbf\x8f\x10\x67\xdc\x4a\x50\x08\xe2\xbe\xc8\xb7\xa8\x4d\xc3\xba\x9e\x7a\x8f\x78\x2f\x9d\x53\xba\xee\xe3\xb5\x39\x48\xdb\x2b\xa3\x11\x02\x71\xd3\x29\x2d\x31\xdf\xe3\x38\xa8\xa6\x92\x56\xac\xb2\x03\xd2\x75\xfe\xbe\xca\xe6\x8b\xc7\xd5\x12\x77\xe2\x39\x2f\x1e\x96\x9b\x02\xc9\x05\x11\x69\xbe\x7b\x41\x8c\x58\x14\x4f\x19\x6a\x73\x1d\x04\x31\xc8\x20\xf2\xfe\xd7\x37\x84\x08\x51\x9c\x8c\x6e\xa7\xa6\x6d\x59\x57\x3b\x76\xe7\xef\x5c\x5c\x2d\x47\xc8\xa6\xe5\x5a\x22\x84\xcb\x7a\xee\x3e\x40\xa4\x0d\x95\x5c\x9e\x25\xb8\xaa\x50\x32\x95\xd2\x3a\x75\x52\x25\x3b\xd9\x63\x32\xc1\xd0\x55\xec\x24\xdd\x24\x57\x51\xa2\x93\x35\xed\xec\xe7\xbb\xbf\x82\xe3\x5a\xa4\xdb\x25\x5e\x6f\x9a\x6f\xe2\x2b\x00\x00\xff\xff\x03\x2a\x04\xb0\x87\x01\x00\x00"),
		},
		"/templates/go.v1/container.yaml": &vfsgen۰CompressedFileInfo{
			name:             "container.yaml",
			modTime:          time.Time{},
			uncompressedSize: 425,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xcd\x6a\xc3\x30\x10\x84\xef\x7a\x8a\x21\xe7\x26\xc1\xe4\xe6\x5b\x49\x21\x14\x7a\x28\x34\xf4\x1c\xd9\x5a\xdb\x8b\xf5\x87\xb4\x4a\x9b\xb7\x2f\x76\xec\x96\x42\x7b\x12\x48\xf3\x7d\xbb\x9a\x2b\xa5\xcc\xc1\xd7\x68\x83\x17\xcd\x9e\xd2\xfe\x5a\xa9\x91\xbd\xa9\xf1\x26\x14\x8f\xeb\xf5\x99\x5c\xb4\x5a\x48\x65\x33\xbe\xaf\xd0\xb5\x52\xdf\x5c\xae\x15\xd0\xe8\x4c\xd3\x09\xc8\x92\xaf\xf1\x14\xda\x91\x52\xc7\x96\x76\x12\xad\xca\x24\xc2\xbe\x9f\xe3\xc7\xe0\x9c\xf6\xe6\x55\xcb\x70\xa7\x0c\xe5\x36\x71\x94\xd9\x7e\x1e\x08\x51\xcb\x00\x09\x90\x81\xd0\xde\xd3\x68\xd8\xeb\x74\x7b\x80\xe5\x91\x70\x69\x9d\xd9\xbb\xdb\x76\x79\xbc\x28\xe0\x14\xd6\x05\xff\x76\x2e\x7f\x46\xe8\x66\xed\x29\xc0\x6a\xdf\x17\xdd\xd3\x34\xa9\x29\x6c\x0d\x3e\x58\x86\x85\xee\x74\xb1\x52\x63\x53\xed\xaa\xc3\x46\x01\xcf\x4e\xf7\xf4\x8f\xfa\xd1\x46\xf6\x84\x17\xf6\xe5\x73\x3b\x95\x61\xc0\x6e\x11\x97\x4c\xe8\x42\x82\xe1\x2c\x89\x9b\x32\xb5\x30\x2f\x90\x85\xe2\x4f\xff\xbf\xa7\xea\x59\x58\x1f\xd4\x57\x00\x00\x00\xff\xff\x1f\xb5\x03\xc8\xa9\x01\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas"].(os.FileInfo),
		fs["/templates"].(os.FileInfo),
	}
	fs["/schemas"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas/v1"].(os.FileInfo),
	}
	fs["/schemas/v1"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas/v1/StepContainer.json"].(os.FileInfo),
		fs["/schemas/v1/StepContainerTemplate.json"].(os.FileInfo),
	}
	fs["/templates"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/templates/bash.v1"].(os.FileInfo),
		fs["/templates/go.v1"].(os.FileInfo),
	}
	fs["/templates/bash.v1"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/templates/bash.v1/Dockerfile.standalone.tpl"].(os.FileInfo),
		fs["/templates/bash.v1/Dockerfile.tpl"].(os.FileInfo),
		fs["/templates/bash.v1/container.yaml"].(os.FileInfo),
	}
	fs["/templates/go.v1"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/templates/go.v1/Dockerfile.tpl"].(os.FileInfo),
		fs["/templates/go.v1/container.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
